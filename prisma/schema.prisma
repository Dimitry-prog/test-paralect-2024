// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  username String

  votes Vote[]
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  image        String
  voteAverange String
  voteCount    String
  trailer      String
  budget       String
  releaseDate  DateTime
  revenue      String
  duration     String

  votes Vote[]

  genres       Genre[]   @relation(fields: [genresIds], references: [id])
  genresIds    String[]  @db.ObjectId
  companies    Company[] @relation(fields: [companiesIds], references: [id])
  companiesIds String[]  @db.ObjectId
}

model Genre {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String

  movies   Movie[]  @relation(fields: [movieIds], references: [id])
  movieIds String[] @db.ObjectId
}

model Company {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  image String?
  title String

  movies   Movie[]  @relation(fields: [movieIds], references: [id])
  movieIds String[] @db.ObjectId
}

model Vote {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  score String

  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String @db.ObjectId
}
